#include <iostream>

using namespace std;

void QS (float *arr1, int *arr2, int left, int right) //сортировка по возрастанию
{ 
    int mid=arr1[(left+right)/2]; 
    int i=left; 
    int j=right; 
    int temp;
    while (i<=j) 
    { 
        while (arr1[i]>mid)
        {
            i++;
        }
        while (arr1[j]<mid) 
        {
            j--;
        }
        if (i<=j) 
        { 
            temp=arr1[i];
            arr1[i]=arr1[j];
            arr1[j]=temp;
            temp=arr2[i];
            arr2[i]=arr2[j];
            arr2[j]=temp;
            i++; 
            j--; 
        } 
    } 
    if (i<right) 
    {
        QS(arr1, arr2, i, right); 
    }
    if (left<j) 
    {
        QS(arr1, arr2, left, j); 
    }
}

void Continuous_knapsack(int W, int n) 
{
    int ArrWeight[n]; //создаем массив объёмов 
    int ArrCost[n]; //создаем массив стоимостей
    int index[n]; //создаем массив, который содержит порядковые номера
    float ArrCostPerUnit[n]; //создаем массив удельных стоимостей
    float ArrPart[n]; //содаем массив, содержащий части взятых вещей
    for (int i=0; i<n; i++) //заполянем массивы 
    { 
        cin>>ArrWeight[i]; //вводим с клавиатуры объемы вещей
        cin>>ArrCost[i]; //вводим с клавиатуры стоимости вещей 
        ArrCostPerUnit[i]=ArrCost[i]/ArrWeight[i]; //находим их удельные стоимости
        index[i]=i;  //порядковые номера
        ArrPart[i]=0.0; //части взятых вещей, заполняем 0
    }
    float cost=0; //стоимость всех вещей, которые поместили в рюкзак
    int WeightOfLoad=0; //объём поещенных в рюкзак вещей
    QS (ArrCostPerUnit, index, 0, n-1); //сортируем по возрастания массивы удельных стоимостей и порядковых номеров (чтобы сохранить порядок вещей)
    for (int i=0; i<n; i++)
    {
        if (WeightOfLoad<W) //если в рюкзкаке еще есть место, то заполняем его вещами с максимальными удельными стоимостями
        {
            WeightOfLoad+=ArrWeight[index[i]];
            cost+=ArrCost[index[i]];
            ArrPart[index[i]]=1.0;
        }
        if (WeightOfLoad>W) //если какая-то вещь не поместилась в рюкзаком полностью, то берем только ее часть
        {
            int j=index[i]; //номер вещи, не поместившейся полностью
            ArrPart[j]=(W-WeightOfLoad+ArrWeight[j])/ArrWeight[j]; //делим объём поместившийся части на весь объём вещи
            cost=cost-ArrCost[j]+ArrCost[j]*ArrPart[j]; //прибавляем стоимость этой части 
            WeightOfLoad=W;
        }
    }
    for (int i=0; i<n; i++) //выводим части взятых вещей
    {
        cout<<ArrPart[i]<<" ";
    }
    cout<<endl<<cost; //выводим общую стоимость вещей
}

int main ()
{
    int W, n;
    cin>>W; //объем рюкзака
    cin>>n; //количество вещей
    Continuous_knapsack(W, n);
    return 0;
}
