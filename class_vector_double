#include <iostream>

using namespace std;

class vector_double {
    double* arr;
    int size;
    int cap;
    public:
       vector_double (int new_size){
           cap=new_size;
           size=0;
           arr = new double [new_size];
       }
       ~vector_double() {
           delete [] arr;
       }
       void append (int new_size) {
           double* temp = new double (new_size);
           for (int i=0; i<cap; i++){
               temp[i]=arr[i];
           }
           delete [] arr;
           arr=temp;
           cap=new_size;
        }
        void push_back (double data) {
            if (size != cap){
                arr[size]=data;
            }
            else {
                int new_size=2*cap;
                double* temp = new double [new_size];
                for (int i=0; i<cap; i++){
                    temp[i]=arr[i];
                }
                delete [] arr;
                arr=temp;
                arr[cap]=data;
                cap=new_size;
            }
            size++;
        }
        const int& operator [] (int i) {
            return arr[i];
        }
        void swap (vector_double a) {
        }    
        double pop_back() {
            double* temp = new double [cap];
            size--;
            for (int i=0; i<size; i++){
                temp[i]=arr[i];
            }
            double a=arr[size];
            delete [] arr;
            arr=temp;
            return a;
        }
};
        
int main() {
    vector_double V(1);
    V.push_back(2.5);
    V.push_back(9);
    V.push_back(8.1);
    V.append(2);
    cout<<V.pop_back;
    return 0;
}
